// Copyright 2005-2015 Metrological
// All Rights Reserved.
;(function (win, loc, doc, services, undef) {
    if (!loc || !win || !doc) return;
    var MAF = win.MAF = win.MAF = {},
        sdk = true,
        origin = loc.origin,
        regexp = RegExp,
        string = String,
        proto = string('prototype'),
        constructor = string('constructor'),
        fromCharCode = string.fromCharCode,
        metrological = string('metrological'),
        library = string('maf-room'),
        version = string('1.0.0'),
        https = string('https'),
        salts = [
            'b48ce274efe63bc264a6e101f867da83',
            'b1dd87949181e18eb98f4d68002b6f2ac9c12565536e2e03d8806f6e97e48a30'
        ],
        date = Date,
        pDate = date[proto],
        array = Array,
        pArray = array[proto],
        object = Object,
        pObject = object[proto],
        fn = Function,
        pFn = fn[proto],
        toString = pObject.toString,
        JSON = win.JSON,
        ArrayBuffer = win.ArrayBuffer,
        Uint8Array = win.Uint8Array,
        WebSocket = win.WebSocket,
        clearInterval = win.clearInterval,
        setInterval = win.setInterval,
        setTimeout = win.setTimeout,
        wsProtocol = loc.protocol === https + ':' ? 'wss' : 'ws',
        reProtocol = string(https + '?://'),
        reQueryString = /\??(.*?)=([^\&]*)&?/gi,
        reDomain = regexp('^' + reProtocol + services[0] + '.' + metrological + '.com$');

    function intval(str, radix) { return parseInt(str, radix || 10); }
    function isCallable(v) { return typeof v === 'function'; }
    function args(a) { return pArray.slice.call(a || []); }
    function getter(obj, key, fn) { if (obj) obj.__defineGetter__(key, fn); }
    function setter(obj, key, fn) { if (obj) obj.__defineSetter__(key, fn); }
    function parse(s) { return JSON.parse(s); }
    function stringify(o) { return JSON.stringify(o); }
    function parseQueryString(q) {
        var r = {}, match;
        while ((match = reQueryString.exec(q))) r[match[1]] = match[2];
        return r;
    }
    function canCreate() {
        return sdk || (reDomain.test(origin) && md5(metrological) === salts[0] && sha256(metrological) === salts[1]);
    }

    (function (p) {
        function bind(oThis) {
            if (!isCallable(this)) throw 'function not callable';
            var aArgs = pArray.slice.call(arguments, 1),
                fToBind = this,
                fNOP = function () {},
                fBound = function () {
                    return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(args(arguments)));
                };
            fNOP[proto] = this[proto];
            fBound[proto] = new fNOP();
            return fBound;
        }
        if (!p.bind) getter(p, 'bind', function () { return bind; });
    }(pFn));

    var md5 = (function (hash) {
        var hexchr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'],
            add32 = function (a, b) { return (a + b) & 0xFFFFFFFF; };
        function cmn(q, a, b, x, s, t) {
            a = add32(add32(a, q), add32(x, t));
            return add32((a << s) | (a >>> (32 - s)), b);
        }
        function ff(a, b, c, d, x, s, t) { return cmn((b & c) | ((~b) & d), a, b, x, s, t); }
        function gg(a, b, c, d, x, s, t) { return cmn((b & d) | (c & (~d)), a, b, x, s, t); }
        function hh(a, b, c, d, x, s, t) { return cmn(b ^ c ^ d, a, b, x, s, t); }
        function ii(a, b, c, d, x, s, t) { return cmn(c ^ (b | (~d)), a, b, x, s, t); }
        function md5cycle(x, k) {
            var a = x[0], b = x[1], c = x[2], d = x[3];
            a = ff(a, b, c, d, k[0], 7, -680876936);
            d = ff(d, a, b, c, k[1], 12, -389564586);
            c = ff(c, d, a, b, k[2], 17, 606105819);
            b = ff(b, c, d, a, k[3], 22, -1044525330);
            a = ff(a, b, c, d, k[4], 7, -176418897);
            d = ff(d, a, b, c, k[5], 12, 1200080426);
            c = ff(c, d, a, b, k[6], 17, -1473231341);
            b = ff(b, c, d, a, k[7], 22, -45705983);
            a = ff(a, b, c, d, k[8], 7, 1770035416);
            d = ff(d, a, b, c, k[9], 12, -1958414417);
            c = ff(c, d, a, b, k[10], 17, -42063);
            b = ff(b, c, d, a, k[11], 22, -1990404162);
            a = ff(a, b, c, d, k[12], 7, 1804603682);
            d = ff(d, a, b, c, k[13], 12, -40341101);
            c = ff(c, d, a, b, k[14], 17, -1502002290);
            b = ff(b, c, d, a, k[15], 22, 1236535329);
            a = gg(a, b, c, d, k[1], 5, -165796510);
            d = gg(d, a, b, c, k[6], 9, -1069501632);
            c = gg(c, d, a, b, k[11], 14, 643717713);
            b = gg(b, c, d, a, k[0], 20, -373897302);
            a = gg(a, b, c, d, k[5], 5, -701558691);
            d = gg(d, a, b, c, k[10], 9, 38016083);
            c = gg(c, d, a, b, k[15], 14, -660478335);
            b = gg(b, c, d, a, k[4], 20, -405537848);
            a = gg(a, b, c, d, k[9], 5, 568446438);
            d = gg(d, a, b, c, k[14], 9, -1019803690);
            c = gg(c, d, a, b, k[3], 14, -187363961);
            b = gg(b, c, d, a, k[8], 20, 1163531501);
            a = gg(a, b, c, d, k[13], 5, -1444681467);
            d = gg(d, a, b, c, k[2], 9, -51403784);
            c = gg(c, d, a, b, k[7], 14, 1735328473);
            b = gg(b, c, d, a, k[12], 20, -1926607734);
            a = hh(a, b, c, d, k[5], 4, -378558);
            d = hh(d, a, b, c, k[8], 11, -2022574463);
            c = hh(c, d, a, b, k[11], 16, 1839030562);
            b = hh(b, c, d, a, k[14], 23, -35309556);
            a = hh(a, b, c, d, k[1], 4, -1530992060);
            d = hh(d, a, b, c, k[4], 11, 1272893353);
            c = hh(c, d, a, b, k[7], 16, -155497632);
            b = hh(b, c, d, a, k[10], 23, -1094730640);
            a = hh(a, b, c, d, k[13], 4, 681279174);
            d = hh(d, a, b, c, k[0], 11, -358537222);
            c = hh(c, d, a, b, k[3], 16, -722521979);
            b = hh(b, c, d, a, k[6], 23, 76029189);
            a = hh(a, b, c, d, k[9], 4, -640364487);
            d = hh(d, a, b, c, k[12], 11, -421815835);
            c = hh(c, d, a, b, k[15], 16, 530742520);
            b = hh(b, c, d, a, k[2], 23, -995338651);
            a = ii(a, b, c, d, k[0], 6, -198630844);
            d = ii(d, a, b, c, k[7], 10, 1126891415);
            c = ii(c, d, a, b, k[14], 15, -1416354905);
            b = ii(b, c, d, a, k[5], 21, -57434055);
            a = ii(a, b, c, d, k[12], 6, 1700485571);
            d = ii(d, a, b, c, k[3], 10, -1894986606);
            c = ii(c, d, a, b, k[10], 15, -1051523);
            b = ii(b, c, d, a, k[1], 21, -2054922799);
            a = ii(a, b, c, d, k[8], 6, 1873313359);
            d = ii(d, a, b, c, k[15], 10, -30611744);
            c = ii(c, d, a, b, k[6], 15, -1560198380);
            b = ii(b, c, d, a, k[13], 21, 1309151649);
            a = ii(a, b, c, d, k[4], 6, -145523070);
            d = ii(d, a, b, c, k[11], 10, -1120210379);
            c = ii(c, d, a, b, k[2], 15, 718787259);
            b = ii(b, c, d, a, k[9], 21, -343485551);
            x[0] = add32(a, x[0]);
            x[1] = add32(b, x[1]);
            x[2] = add32(c, x[2]);
            x[3] = add32(d, x[3]);
        }
        function md5blk(s) {
            var md5blks = [], i;
            for (i = 0; i < 64; i += 4)
                md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
            return md5blks;
        }
        function md51(s) {
            var n = s.length,
                state = [1732584193, -271733879, -1732584194, 271733878],
                i, length, tail, tmp, lo, hi;
            for (i = 64; i <= n; i += 64)
                md5cycle(state, md5blk(s.substring(i - 64, i)));
            s = s.substring(i - 64);
            length = s.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i = 0; i < length; i += 1)
                tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
            tail[i >> 2] |= 0x80 << ((i % 4) << 3);
            if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1)
                    tail[i] = 0;
            }
            tmp = n * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = intval(tmp[2], 16);
            hi = intval(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi;
            md5cycle(state, tail);
            return state;
        }
        function rhex(n) {
            var s = '', j;
            for (j = 0; j < 4; j += 1)
                s += hexchr[(n >> (j * 8 + 4)) & 0x0F] + hexchr[(n >> (j * 8)) & 0x0F];
            return s;
        }
        function hex(x) {
            for (var i = 0; i < x.length; i += 1)
                x[i] = rhex(x[i]);
            return x.join('');
        }
        function v() {
            return hex(md51(metrological)) === hash;
        }
        if (!v())
            add32 = function (x, y) {
                var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                    msw = (x >> 16) + (y >> 16) + (lsw >> 16);
                return (msw << 16) | (lsw & 0xFFFF);
            };
        if (v()) return function (s) { return hex(md51(s)); }; else throw 'unknown error';
    }(salts[0]));

    sdk = (function (origin, localOrigins) {
        function isLocal(origin) {
            if (!origin) return false;
            for (var i = 0; i < localOrigins.length; i++)
                if (localOrigins[i].test(origin)) return true;
            return false;
        }
        return isLocal(origin);
    }(origin, [
        regexp('^' + reProtocol + '10.(\\d{1,3}).(\\d{1,3}).(\\d{1,3}):?\\d*$'), // Class A
        regexp('^' + reProtocol + '172.(1[6-9]|2[0-9]|3[0-1]).(\\d{1,3}).(\\d{1,3}):?\\d*$'), // Class B
        regexp('^' + reProtocol + '192.168.(\\d{1,3}).(\\d{1,3}):?\\d*$'), // Class C
        regexp('^' + reProtocol + 'localhost:?\\d*$') // localhost
    ]));

    var sha256 = (function (HEX_CHARS, EXTRA, SHIFT, K) {
        var blocks = [];
        return function (message) {
            var notString = typeof(message) !== 'string';
            if (notString && message[constructor] === ArrayBuffer)
                message = new Uint8Array(message);

            var h0, h1, h2, h3, h4, h5, h6, h7, block, code, first = true, end = false,
                i, j, index = 0, start = 0, bytes = 0, length = message.length,
                s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

            h0 = 0x6a09e667;
            h1 = 0xbb67ae85;
            h2 = 0x3c6ef372;
            h3 = 0xa54ff53a;
            h4 = 0x510e527f;
            h5 = 0x9b05688c;
            h6 = 0x1f83d9ab;
            h7 = 0x5be0cd19;
            block = 0;
            do {
                blocks[0] = block;
                blocks[16] = blocks[1] = blocks[2] = blocks[3] =
                    blocks[4] = blocks[5] = blocks[6] = blocks[7] =
                        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
                            blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
                if (notString) {
                    for (i = start;index < length && i < 64; ++index)
                        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                } else {
                    for (i = start;index < length && i < 64; ++index) {
                        code = message.charCodeAt(index);
                        if (code < 0x80) {
                            blocks[i >> 2] |= code << SHIFT[i++ & 3];
                        } else if (code < 0x800) {
                            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        } else if (code < 0xd800 || code >= 0xe000) {
                            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        } else {
                            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                        }
                    }
                }
                bytes += i - start;
                start = i - 64;
                if(index == length) {
                    blocks[i >> 2] |= EXTRA[i & 3];
                    ++index;
                }
                block = blocks[16];
                if(index > length && i < 56) {
                    blocks[15] = bytes << 3;
                    end = true;
                }
                var a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7;
                for(j = 16;j < 64;++j) {
                    // rightrotate
                    t1 = blocks[j - 15];
                    s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
                    t1 = blocks[j - 2];
                    s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
                    blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
                }

                bc = b & c;
                for (j = 0;j < 64;j += 4) {
                    if (first) {
                        ab = 704751109;
                        t1 = blocks[0] - 210244248;
                        h = t1 - 1521486534 << 0;
                        d = t1 + 143694565 << 0;
                        first = false;
                    } else {
                        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
                        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
                        ab = a & b;
                        maj = ab ^ (a & c) ^ bc;
                        ch = (e & f) ^ (~e & g);
                        t1 = h + s1 + ch + K[j] + blocks[j];
                        t2 = s0 + maj;
                        h = d + t1 << 0;
                        d = t1 + t2 << 0;
                    }
                    s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
                    s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
                    da = d & a;
                    maj = da ^ (d & b) ^ ab;
                    ch = (h & e) ^ (~h & f);
                    t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
                    t2 = s0 + maj;
                    g = c + t1 << 0;
                    c = t1 + t2 << 0;
                    s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
                    s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
                    cd = c & d;
                    maj = cd ^ (c & a) ^ da;
                    ch = (g & h) ^ (~g & e);
                    t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
                    t2 = s0 + maj;
                    f = b + t1 << 0;
                    b = t1 + t2 << 0;
                    s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
                    s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
                    bc = b & c;
                    maj = bc ^ (b & d) ^ cd;
                    ch = (f & g) ^ (~f & h);
                    t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
                    t2 = s0 + maj;
                    e = a + t1 << 0;
                    a = t1 + t2 << 0;
                }

                h0 = h0 + a << 0;
                h1 = h1 + b << 0;
                h2 = h2 + c << 0;
                h3 = h3 + d << 0;
                h4 = h4 + e << 0;
                h5 = h5 + f << 0;
                h6 = h6 + g << 0;
                h7 = h7 + h << 0;
            } while(!end);

            return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] + HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] + HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] + HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] + HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] + HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] + HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] + HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] + HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] + HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] + HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] + HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] + HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] + HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] + HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] + HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] + HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] + HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] + HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] + HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] + HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] + HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] + HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] + HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F] + HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] + HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] + HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] + HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
        };
    }('0123456789abcdef'.split(''), [ -2147483648, 8388608, 32768, 128 ], [ 24, 16, 8, 0 ], [ 0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2 ]));

    var options = (function (s) {
            try { return parseQueryString(s); } catch(err) {}
        }(loc.search)) || {};

    var settings = (function (s) {
            for (var i = 0; i < s.length; i++) {
                var params = (s[i].src || '').split('#');
                if (params.length > 1 && regexp(library + '.(min.js|js)').test(params[0]))
                    return parseQueryString(params[1]);
            }
        }(doc.getElementsByTagName('script'))) || {};

    var Room = MAF.Room = (function (win, doc, identifier, allowCreate, service) {
        var retry = 0,
            reconnect = 3000,
            connected = false,
            discovering = false,
            users = {},
            rooms = {},
            discovered = {},
            tokens = {},
            queue = [],
            pipe = string('|'),
            dot = string('.'),
            com = string('com'),
            last = service.length-1,
            ws;

        if (!identifier) throw 'missing application identifier';

        function trigger(event) {
            this.events = this.events || {};
            if (event in this.events === false) return;
            var arg = pArray.slice.call(arguments, 1);
            for (var i = 0; i < this.events[event].length; i++)
                this.events[event][i].apply(this, arg);
        }
        function send(o) {
            if (connected && ws && ws.readyState === 1) return ws.send(stringify(o));
            queue.push(o);
        }
        function create() {
            if (md5(metrological) !== salts[0] || sha256(metrological) !== salts[1]) return;
            return new WebSocket(wsProtocol + '://' + service[0] + service[last] + (sdk ? '-' + services[1] : '') + dot + metrological + dot + com);
        }
        function discover() {
            send({ e: 's' });
        }
        function reJoin(interval) {
            if (this.joined) return clearInterval(interval);
            this.join();
        }
        function opened() {
            connected = true;
            retry = 0;
            for (var hash in rooms) {
                var room = rooms[hash];
                room.user = undef;
                trigger.call(room, 'connected', { hash: hash });
                var interval = setInterval(reJoin.bind(room, interval), reconnect);
            }
            while (queue.length) {
                var e = queue.pop();
                send(e);
            }
        }
        function message(event) {
            var json = parse(event.data),
                e = json.e,
                k = json.k,
                h = json.h,
                u = json.u,
                d = json.d,
                r = rooms[h];
            if (e !== 's' && !k && !r) return;
            switch(e) {
                case 'j':
                    if (k && allowCreate) {
                        users[h] = (users[h] || []).concat(u);
                        return trigger.call(Room, 'created', { id: tokens[k], hash: h, user: u, data: d});
                    }
                    r.joined = true;
                    if (!r.user) r.user = u;
                    users[h] = users[h] || [];
                    if (users[h].indexOf(u) === -1) {
                        users[h].push(u);
                        trigger.call(r, 'joined', { hash: h, user: u, data: d});
                    }
                    if (r.user !== u)
                        send({ e: 'p', h: h, d: d });
                    break;
                case 'l':
                    if (u === r.user) r.user = undef;
                    var i = users[h].indexOf(u);
                    if (i > -1) {
                        users[h].splice(i, 1);
                        trigger.call(r, 'hasleft', { hash: h, user: u, data: d});
                    }
                    break;
                case 'd':
                    if (users[h].indexOf(u) !== -1)
                        trigger.call(r, 'data', { hash: h, user: u, data: d});
                    break;
                case 'p':
                    if (users[h].indexOf(u) === -1) {
                        users[h].push(u);
                        trigger.call(r, 'joined', { hash: h, user: u, data: d});
                    }
                    break;
                case 'e':
                    trigger.call(r, 'error', { hash: h, user: u, code: json.c});
                    break;
                case 's':
                    var hashes = [],
                        remove = json.t === 'r';
                    for (var key in discovered)
                        hashes.push(discovered[key]);
                    for (var j = 0; j < d.length; j++) {
                        var dd = d[j], dk = dd.k, dh = dd.h;
                        if (remove) {
                            delete discovered[dk];
                            var idx = hashes.indexOf(dh);
                            if (idx !== -1) hashes.splice(idx, 1);
                        } else {
                            discovered[dk] = dh;
                            if (hashes.indexOf(dh) === -1)
                                hashes.push(dh);
                        }
                    }
                    if (hashes.length > 0)
                        trigger.call(Room, 'discovery', { hashes: hashes });
                    break;
                default:
                    break;
            }
        }
        function scheduleReconnect() {
            setTimeout(init, reconnect * retry);
        }
        function closed() {
            connected = false;
            discovered = [];
            retry++;
            if (ws) ws.onopen = ws.onmessage = ws.onclose = null;
            ws = null;
            for (var hash in rooms) {
                var room = rooms[hash];
                if (room.joined) trigger.call(room, 'disconnected', { hash: hash });
                room.joined = undef;
                room.user = undef;
                users[hash].length = 0;
            }
            scheduleReconnect();
        }
        function init() {
            ws = ws || create();
            if (ws) {
                ws.onopen = opened;
                ws.onmessage = message;
                ws.onclose = closed;
            } else {
                retry++;
                scheduleReconnect();
            }
        }

        init();

        function generateKey(id) {
            return md5(identifier + pipe + id);
        }
        function createRoom(id, data) {
            if (!allowCreate) return;
            var k = generateKey(id);
            tokens[k] = id;
            send({ e: 'j', k: k, d: data });
        }
        function roomExists(hash) {
            return rooms[hash] !== undef;
        }
        function getHashById(id) {
            var k = generateKey(id);
            return discovered[k];
        }
        function addEventListener(event, fn) {
            this.events = this.events || {};
            this.events[event] = this.events[event] || [];
            this.events[event].push(fn);
        }
        function removeEventListener(event, fn) {
            this.events = this.events || {};
            if (event in this.events === false) return;
            var i = this.events[event].indexOf(fn);
            if (i > -1) this.events[event].splice(i, 1);
        }

        function Room(hash) {
            hash = hash || settings.hash || options.hash;
            if (!hash) throw 'missing hash';
            if (rooms[hash]) return rooms[hash];

            getter(this, 'hash', function () { return hash; });
            getter(this, 'users', function () { return users[hash]; });
            getter(this, 'connected', function () { return connected; });

            if (!users[hash]) {
                this.joined = false;
                users[hash] = [];
            } else {
                this.joined = true;
                this.user = users[hash][0];
            }
            rooms[hash] = this;
        }
        Room[proto] = {
            join: function (data) {
                if (!this.joined) send({ e: 'j', h: this.hash, d: data });
            },
            leave: function (data) {
                this.user = undef;
                send({ e: 'l', h: this.hash, d: data });
            },
            send: function (data) {
                send({ e: 'd', h: this.hash, d: data });
            },
            addEventListener: function (event, fn) {
                addEventListener.call(this, event, fn);
            },
            removeEventListener: function (event, fn) {
                removeEventListener.call(this, event, fn);
            },
            destroy: function () {
                if (!rooms) return;
                this.leave();
                for (var event in this.events || {}) {
                    if (this.events[event])
                        this.events[event].length = 0;
                    delete this.events[event];
                }
                delete this.events;
                if (users[this.hash])
                    users[this.hash].length = 0;
                delete users[this.hash];
                delete rooms[this.hash];
            }
        };
        getter(Room, 'discover', function () { return discover; });
        getter(Room, 'addEventListener', function () { return addEventListener.bind(this); });
        getter(Room, 'removeEventListener', function () { return removeEventListener.bind(this); });
        getter(Room, 'create', function () { return createRoom; });
        getter(Room, 'exists', function () { return roomExists; });
        getter(Room, 'hash', function () { return getHashById; });
        getter(Room, 'version', function () { return version; });

        win.addEventListener('unload', function () {
            if (ws) {
                ws.onopen = null;
                ws.onmessage = null;
                ws.onclose = null;
            }
            for (var hash in rooms)
                if (rooms[hash]) rooms[hash].destroy();
            ws = rooms = users = discovered = tokens = null;
            for (var event in Room.events || {}) {
                if (Room.events[event])
                    Room.events[event].length = 0;
                delete Room.events[event];
            }
            delete Room.events;
        });

        return Room;
    }(win, doc, settings.identifier, canCreate(), services[0]));
}(window, location, document, ['widgets', 'sdk']));
